Roles for the HOD:
•	Login into the system 
•	Register a new Engineer with a username(email) and password and the category (Hardware/software)
•	Can see List of all the Registered Engineers.
•	Can Delete any Engineers from the system
•	Can able to see all the raised problem.
•	Can assign any problem to any Engineer.
Roles of Engineer:
•	Each engineer has their own account by which they can login.(credentials given by the HOD)
•	Engineer can view the problem assigned to him by HOD .
•	Engineer can update the status of the problem addressed by him . i. e. whether it solved or any thing .
•	They can see list of all the problems attended by him/her.
•	Engineer can change his password.

Roles of Employee:

•	Employee can register himself with his username and password.
•	Each employee has their account in the system with which they can login
•	Employee can register any complain (hardware / software ) through the system. After registering the complain a complain id is generated by the system.
•	Employee can see the status of their problem by using complain id . Status means they can check who (engineer) is assigned to his problem.
•	They can see all complain history raised by him/her.
•	Employee can change his/her password.

=================================DATABASE==============================================================
 1) Created the database name:project1.
+--------------------+
| Database           |
+--------------------+
| fw19_sb101_sprint3 |
| information_schema |
| mysql              |
| performance_schema |
| project1           |
| sys                |
| web19              |
+--------------------+
=======================================TABLES=========================================================

2) Create all the tables as per the project requirements.


2.1) create HOD table
	(
	username varchar(15),
	password varchar(15)
	);
	


mysql> desc hod;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| username | varchar(15) | YES  |     | NULL    |       |
| password | varchar(15) | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+

2.2)create table engineer
	  (
	  EngId primary key auto increment,
	  EngName varchar(15),
	  EngUserName varchar(15) unique,
	  EngPasswor varchar(15),
	  EngCategory varchar(20)
	  );

	
	mysql> desc engineer;
+-------------+-------------+------+-----+---------+----------------+
| Field       | Type        | Null | Key | Default | Extra          |
+-------------+-------------+------+-----+---------+----------------+
| EngId       | int         | NO   | PRI | NULL    | auto_increment |
| EngName     | varchar(15) | YES  |     | NULL    |                |
| EngUserName | varchar(15) | YES  | UNI | NULL    |                |
| EngPassword | varchar(15) | YES  |     | NULL    |                |
| EngCategory | varchar(20) | YES  |     | NULL    |                |
+-------------+-------------+------+-----+---------+----------------+
 
 2.3)create table Problems
	(
	pid int primary key auto_increment,
	pname varchar(20),
	pcategory varchar(15)
	);

mysql> desc problems;
+-----------+-------------+------+-----+---------+----------------+
| Field     | Type        | Null | Key | Default | Extra          |
+-----------+-------------+------+-----+---------+----------------+
| pid       | int         | NO   | PRI | NULL    | auto_increment |
| pname     | varchar(20) | YES  |     | NULL    |                |
| pcategory | varchar(15) | YES  |     | NULL    |                |
| status    | varchar(15) | YES  |     | NULL    |                |
+-----------+-------------+------+-----+---------+----------------+

2.4)create table employee
	  (
	  empID primary key auto_increment,
	  empName varchar(15),
	  empUserName varchar(15) unique,
	  empPasswor varchar(15)
	  );

mysql> desc employee;
+-------------+-------------+------+-----+---------+----------------+
| Field       | Type        | Null | Key | Default | Extra          |
+-------------+-------------+------+-----+---------+----------------+
| empID       | int         | NO   | PRI | NULL    | auto_increment |
| empName     | varchar(15) | YES  |     | NULL    |                |
| empUserName | varchar(15) | YES  | UNI | NULL    |                |
| empPassword | varchar(15) | YES  |     | NULL    |                |
+-------------+-------------+------+-----+---------+----------------+



-------------------------------------------------------
Relation between enployee and engineer and problems;
------------------------------------------------------

    2.5)create table employee_engineer
   	  (
  	   rpid int,
   	  reid int,
   	  FOREIGN KEY (rpid) REFERENCES problems(pid),
  	   FOREIGN KEY (reid) REFERENCES engineer (Engid)
   	  );

mysql> desc employee_engineer;
+-------+------+------+-----+---------+-------+
| Field | Type | Null | Key | Default | Extra |
+-------+------+------+-----+---------+-------+
| rpid  | int  | YES  | MUL | NULL    |       |
| reid  | int  | YES  | MUL | NULL    |       |
+-------+------+------+-----+---------+-------+

================================  CONNECTION  =========================================================

3)Create a Separated Unitily package fro making a database connection...

	1. DButil
	
	Class.forName("com.mysql.cj.jdbc.Driver");
		
        String url="jdbc:mysql://localhost:3306/project1";
        
        

=======================================  Bean CLASSES  ===========================================
4)      =>Employee bean
        =>Engineer bean
        =>Hod bean
        =>problem bean

================================  DAO Interfaces and their implentation classes ================= 

5)
	  =>EngineerDao (Interface)
	  =>EngineerDaoImpl (Class)

	  =>EmployeeDao (Interface)
	  =>EmployeeDaoImpl (Class)
	  
	  =>HodDao (Interface)
	  =>HodDaoImpl (Class)

      =>ProblemsDao (Interface)
	  =>ProblemsDaoImpl (Class)    
	  
	  
==================================  Exceptions ==================================================

6)    
	  =>EngineerException
	 

	  =>EmployeeException
	  
	   
	  =>HodException
	  

      =>ProblemsException
	 	  
===================================  Usecases  ====================================================

7)  

7.1) Hod usescases:-
   ==================
     => 
       HodLoginUseCase:(File Name)
     
	   a. username : admin.
	   b. password : admin123..
	   

	 =>Requirement: Register a new Engineer with a username(email) and password and the category (Hardware/software)
	   RegisterEngineerUseCase1(File Name)
	   Query:  PreparedStatement ps=conn.prepareStatement("insert into Employee(engName,engUserName,engPassword) values(?,?,?)");

	   a. username (email) : HODDecides
	   b. password         : HODDecides
	   
	   
	 =>Requirement: Can see a List of all the Registered Engineers.
	   AllEngineeerDetailsUseCase(File Name)
	   Query:  PreparedStatement ps=conn.prepareStatement("select * from engineer");
	
	
     =>Requirement: Can Delete any Engineers from the system
	   DeleteEnginnerUseCase(File Name)
	   Query: PreparedStatement ps = conn.prepareStatement("delete from Engineer where engname = ?");
	
	 =>Requirement: Can able to see all the raised problems.
	   
	   Query:PreparedStatement ps=conn.prepareStatement("select * from problems");
			 
	
	 =>Can assign any problem to any Engineer
       AssignProblemToEngineerUseCase (File Name)
	   Query: PreparedStatement ps=conn.prepareStatement("select * from engineer where engid=?");

  
  7.2)  Engineer Usecases:-	
      =======================
      
	    =>Requirement: Each engineer has an account by which they can log in. (credentials given by the HOD)
	      EngineerLoginUseCase (File Name)
	      Query :PreparedStatement ps =conn.prepareStatement("select * from Employee where empUserName=? AND empPassword=?");
		 

	    =>Requirement: Engineer can view the problem assigned to him by HOD.
	      GetEngineerToAssignProblem (File Name)
	      Query : PreparedStatement ps=conn.prepareStatement("select e.engid,p.pid, e.engname,p.pname,e.engcategory,p.status from engineer e INNER JOIN problems p INNER JOIN employee_engineer ee ON e.engid=ee.reid AND p.pid=ee.rpid AND p.pname =?;");
		
		
	    =>Requirement: Engineer can update the status of the problem addressed by him. i. e. whether it is solved or anything.
	      UpdateProblemStatusUseCase(File Name)
	      Query :PreparedStatement ps= conn.prepareStatement("update problems set status = ? where pid= ?");
			 
		
	
	    =>Requirement: They can see a list of all the problems attended by him/her.
	      GetListOfEmployeeAssignProblemUseCase(File Name)
	      Query : PreparedStatement ps=conn.prepareStatement("select e.engid, e.engname,e.engcategory,p.pname from engineer e INNER JOIN problems p INNER JOIN employee_engineer ee ON e.engid=ee.reid AND p.pid=ee.rpid AND p.pname=?");
			
		
		
	    =>Requirement: Engineer can change his password.
	      UpdatePasswordToEngineerUseCase(File Name)
	      Query :PreparedStatement ps= conn.prepareStatement("update Engineer set Engpassword= ? where EngUserName= ? AND EngPassword= ? ");			
		 
		 
		 
7.3)     Employee Usecases:		 
       =======================
       
       =>Requirement: Employee can register himself with his username and password.
	     RegisterEmployeeUseCase1(File Name)
	     Query :PreparedStatement ps=conn.prepareStatement("insert into Employee(empName,empUserName,empPassword) values(?,?,?)");
	

	   =>Requirement: Each employee has their account in the system with which they can log in
	     EmployeeLoginUseCase(File Name)
	     Query :PreparedStatement ps =conn.prepareStatement("select * from Employee where empUserName=? AND empPassword=?");
		
	
	   =>Requirement: Employee can register any complaint (hardware/software) through the system. After registering the complaint a complaint id is generated by the system.
	     CreateProblemUseCase(File Name)
	     Query :PreparedStatement ps=conn.prepareStatement("insert into Problems(pname,pcategory)values(?,?)");
		
	
	   =>Requirement: Employees can see the status of their problem by using complaint id. Status means they can check who (engineer) is assigned to his problem.
	     UpdateProblemStatusUseCase(File Name)
	     Query :PreparedStatement ps=conn.prepareStatement("select * from problems");
		

	   =>Requirement: They can see all complaints history raised by him/her.
	     GetEngineerToAssignProblem(File Name)
	     Query :PreparedStatement ps=conn.prepareStatement("select e.engid,p.pid, e.engname,p.pname,e.engcategory,p.status from engineer e INNER JOIN problems p INNER JOIN employee_engineer ee ON e.engid=ee.reid AND p.pid=ee.rpid AND p.pname =?;");
		

	   =>Requirement: Employee can change his/her password.
	     AllProblemListUseCase(File Name)
	     Query :PreparedStatement ps= conn.prepareStatement("update employee set emppassword= ? where empUserName= ? AND empPassword= ? ");			
		
       
 =========================================================================================================================================================================================================================================================      